#!/bin/bash
command_name=$1
shift


psub () {
    perl -0pe 's/'"$1"'/'"$2"'/g'
}
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# 
# if being called from docker
# 
FILE=/proc/1/cpuset
if test -f "$FILE"; then
    # from docker means we have don't access to the real pwd
    # however we do have access to the container's own name and therefore
    # that can be used to figure out the name for all the other images
    container="$(basename "$(cat /proc/1/cpuset)" | cut -c 1-12 )"
    image="$(docker ps | grep $container | awk '{print $2}' | psub ':.+' '')"
    docker_project_dir="$(docker images | grep $image | awk '{print $1}' | psub '\s+[\w\W]*$' '')"
    image_name="$docker_project_dir:$command_name"
# 
# if being called locally
# 
else 
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # locally means we have access to the real PWD, meaning we can caculate the image name
        image_name=$("$SCRIPT_DIR/atk_docker_image_name-macos" $command_name )
    else
        image_name=$("$SCRIPT_DIR/atk_docker_image_name-linux" $command_name )
    fi
fi
exec docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v /usr/local/bin/docker:/usr/local/bin/docker  -v "/Users/jeffhykin/Nextcloud/Programming/expressions_dataset":/project -- $image_name "$@"