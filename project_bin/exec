#!/bin/bash
command_name=$1
shift
entrypoint=$1
shift

# find the location of this script file
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# TODO: there's probably a more elegant solution than this
PROJECT_PATH="$(cat "$SCRIPT_DIR/../.project_dir.nosync.txt")"

psub () {
    perl -0pe 's/'"$1"'/'"$2"'/g'
}
relpath() {
    # both $1 and $2 are absolute paths beginning with /
    # $1 must be a canonical path; that is none of its directory
    # components may be ".", ".." or a symbolic link
    #
    # returns relative path to $2/$target from $1/$source
    source="$1"
    target="$2"

    common_part=$source
    result=

    while [ "${target#"$common_part"}" = "$target" ]; do
        # no match, means that candidate common part is not correct
        # go up one level (reduce common part)
        common_part=$(dirname "$common_part")
        # and record that we went back, with correct / handling
        if [ -z "$result" ]; then
            result=..
        else
            result=../$result
        fi
    done

    if [ "$common_part" = / ]; then
        # special case for root (no common path)
        result=$result/
    fi

    # since we now have identified the common part,
    # compute the non-common part
    forward_part=${target#"$common_part"}

    # and now stick all parts together
    if [ -n "$result" ] && [ -n "$forward_part" ]; then
        result=$result$forward_part
    elif [ -n "$forward_part" ]; then
        # extra slash removal
        result=${forward_part#?}
    fi

    printf '%s\n' "$result"
}

abspath() {
    echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}



# 
# if being called from docker
# 
FILE=/proc/1/cpuset
if test -f "$FILE"; then
    WORKING_DIR="$PWD"
    # from docker means we have don't access to the real pwd
    # however we do have access to the container's own name and therefore
    # that can be used to figure out the name for all the other images
    container="$(basename "$(cat /proc/1/cpuset)" | cut -c 1-12 )"
    image="$(docker ps | grep $container | awk '{print $2}' | psub ':.+' '')"
    docker_project_dir="$(docker images | grep $image | awk '{print $1}' | psub '\s+[\w\W]*$' '')"
    image_name="$docker_project_dir:$command_name"
# 
# if being called locally
# 
else
    # convert working dir into equivlent of where that would be on the target machine
    WORKING_DIR="/project/$(relpath $PROJECT_PATH $PWD)"
    image_name=$(ruby "$SCRIPT_DIR/../scripts/convert_name.rb" $command_name )
fi

exec docker run -it --rm --entrypoint="$entrypoint" -v /var/run/docker.sock:/var/run/docker.sock -v /usr/local/bin/docker:/usr/local/bin/docker --workdir "$WORKING_DIR" -v "$PROJECT_PATH":/project -- $image_name "$@"